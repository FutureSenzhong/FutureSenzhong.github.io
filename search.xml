<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[十分钟入门Pandas]]></title>
    <url>%2F2018%2F12%2F13%2F10%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8Pandas%2F</url>
    <content type="text"><![CDATA[In [1]: 1%matplotlib inline In [2]: 1import pandas as pd In [3]: 1import numpy as np In [4]: 1import matplotlib.pyplot as plt In [5]: 1s = pd.Series([1,3,5,np.nan,6,8]) In [6]: 1s Out[6]: 12345670 1.01 3.02 5.03 NaN4 6.05 8.0dtype: float64 In [7]: 1dates = pd.date_range('20130101', periods=6) In [8]: 1dates Out[8]: 123DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], dtype='datetime64[ns]', freq='D') In [9]: 1df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD')) In [10]: 1df Out[10]: A B C D 2013-01-01 -1.234543 -0.181094 0.602767 0.024092 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 2013-01-03 0.108684 -0.698606 0.294223 0.779937 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 2013-01-06 0.603919 -0.292847 -0.351932 -0.546226 In [11]: 123456df2 = pd.DataFrame(&#123;'A' : 1., 'B' : pd.Timestamp('20130102'), 'C' : pd.Series(1,index=list(range(4)),dtype='float32'), 'D' : np.array([3] * 4,dtype='int32'), 'E' : pd.Categorical(["test","train","test","train"]), 'F' : 'foo'&#125;) In [12]: 1df2 Out[12]: A B C D E F 0 1.0 2013-01-02 1.0 3 test foo 1 1.0 2013-01-02 1.0 3 train foo 2 1.0 2013-01-02 1.0 3 test foo 3 1.0 2013-01-02 1.0 3 train foo In [13]: 1df2.dtypes Out[13]: 1234567A float64B datetime64[ns]C float32D int32E categoryF objectdtype: object In [14]: 1df.head() Out[14]: A B C D 2013-01-01 -1.234543 -0.181094 0.602767 0.024092 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 2013-01-03 0.108684 -0.698606 0.294223 0.779937 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 In [15]: 1df.tail(3) Out[15]: A B C D 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 2013-01-06 0.603919 -0.292847 -0.351932 -0.546226 In [16]: 1df.index Out[16]: 123DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06'], dtype='datetime64[ns]', freq='D') In [17]: 1df.columns Out[17]: 1Index([u'A', u'B', u'C', u'D'], dtype='object') In [18]: 1df.values Out[18]: 123456array([[-1.23454325, -0.18109375, 0.60276697, 0.02409219], [-1.01234439, -1.74766336, -0.44616522, -0.30827222], [ 0.10868385, -0.69860582, 0.29422346, 0.77993654], [ 0.87005021, -0.16265896, -1.84247599, -0.82842427], [ 1.58629419, -0.36956975, 0.88773803, -0.06712956], [ 0.60391916, -0.29284674, -0.35193192, -0.54622645]]) In [19]: 1df.describe() Out[19]: A B C D count 6.000000 6.000000 6.000000 6.000000 mean 0.153677 -0.575406 -0.142641 -0.157671 std 1.100644 0.606204 0.983212 0.555681 min -1.234543 -1.747663 -1.842476 -0.828424 25% -0.732087 -0.616347 -0.422607 -0.486738 50% 0.356302 -0.331208 -0.028854 -0.187701 75% 0.803517 -0.209032 0.525631 0.001287 max 1.586294 -0.162659 0.887738 0.779937 In [20]: 1df.T Out[20]: 2013-01-01 00:00:00 2013-01-02 00:00:00 2013-01-03 00:00:00 2013-01-04 00:00:00 2013-01-05 00:00:00 2013-01-06 00:00:00 A -1.234543 -1.012344 0.108684 0.870050 1.586294 0.603919 B -0.181094 -1.747663 -0.698606 -0.162659 -0.369570 -0.292847 C 0.602767 -0.446165 0.294223 -1.842476 0.887738 -0.351932 D 0.024092 -0.308272 0.779937 -0.828424 -0.067130 -0.546226 In [21]: 1df.sort_index(axis=1, ascending=False) Out[21]: D C B A 2013-01-01 0.024092 0.602767 -0.181094 -1.234543 2013-01-02 -0.308272 -0.446165 -1.747663 -1.012344 2013-01-03 0.779937 0.294223 -0.698606 0.108684 2013-01-04 -0.828424 -1.842476 -0.162659 0.870050 2013-01-05 -0.067130 0.887738 -0.369570 1.586294 2013-01-06 -0.546226 -0.351932 -0.292847 0.603919 In [22]: 1df.sort_values(by='B') Out[22]: A B C D 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 2013-01-03 0.108684 -0.698606 0.294223 0.779937 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 2013-01-06 0.603919 -0.292847 -0.351932 -0.546226 2013-01-01 -1.234543 -0.181094 0.602767 0.024092 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 In [23]: 1df['A'] Out[23]: 12345672013-01-01 -1.2345432013-01-02 -1.0123442013-01-03 0.1086842013-01-04 0.8700502013-01-05 1.5862942013-01-06 0.603919Freq: D, Name: A, dtype: float64 In [24]: 1df[0:3] Out[24]: A B C D 2013-01-01 -1.234543 -0.181094 0.602767 0.024092 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 2013-01-03 0.108684 -0.698606 0.294223 0.779937 In [25]: 1df['20130102':'20130104'] Out[25]: A B C D 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 2013-01-03 0.108684 -0.698606 0.294223 0.779937 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 In [26]: 1df.loc[dates[0]] Out[26]: 12345A -1.234543B -0.181094C 0.602767D 0.024092Name: 2013-01-01 00:00:00, dtype: float64 In [27]: 1df.loc[:,['A','B']] Out[27]: A B 2013-01-01 -1.234543 -0.181094 2013-01-02 -1.012344 -1.747663 2013-01-03 0.108684 -0.698606 2013-01-04 0.870050 -0.162659 2013-01-05 1.586294 -0.369570 2013-01-06 0.603919 -0.292847 In [28]: 1df.loc['20130102':'20130104',['A','B']] Out[28]: A B 2013-01-02 -1.012344 -1.747663 2013-01-03 0.108684 -0.698606 2013-01-04 0.870050 -0.162659 In [29]: 1df.loc['20130102',['A','B']] Out[29]: 123A -1.012344B -1.747663Name: 2013-01-02 00:00:00, dtype: float64 In [30]: 1df.loc[dates[0],'A'] Out[30]: 1-1.2345432480819052 In [31]: 1df.at[dates[0],'A'] Out[31]: 1-1.2345432480819052 In [32]: 1df.iloc[3] Out[32]: 12345A 0.870050B -0.162659C -1.842476D -0.828424Name: 2013-01-04 00:00:00, dtype: float64 In [33]: 1df.iloc[3:5,0:2] Out[33]: A B 2013-01-04 0.870050 -0.162659 2013-01-05 1.586294 -0.369570 In [34]: 1df.iloc[[1,2,4],[0,2]] Out[34]: A C 2013-01-02 -1.012344 -0.446165 2013-01-03 0.108684 0.294223 2013-01-05 1.586294 0.887738 In [35]: 1df.iloc[1:3,:] Out[35]: A B C D 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 2013-01-03 0.108684 -0.698606 0.294223 0.779937 In [36]: 1df.iloc[:,1:3] Out[36]: B C 2013-01-01 -0.181094 0.602767 2013-01-02 -1.747663 -0.446165 2013-01-03 -0.698606 0.294223 2013-01-04 -0.162659 -1.842476 2013-01-05 -0.369570 0.887738 2013-01-06 -0.292847 -0.351932 In [37]: 1df.iloc[1,1] Out[37]: 1-1.7476633559261565 In [38]: 1df.iat[1,1] Out[38]: 1-1.7476633559261565 In [39]: 1df[df.A&gt;0] Out[39]: A B C D 2013-01-03 0.108684 -0.698606 0.294223 0.779937 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 2013-01-06 0.603919 -0.292847 -0.351932 -0.546226 In [40]: 1df[df &gt; 0] Out[40]: A B C D 2013-01-01 NaN NaN 0.602767 0.024092 2013-01-02 NaN NaN NaN NaN 2013-01-03 0.108684 NaN 0.294223 0.779937 2013-01-04 0.870050 NaN NaN NaN 2013-01-05 1.586294 NaN 0.887738 NaN 2013-01-06 0.603919 NaN NaN NaN In [41]: 1df2 = df.copy() In [42]: 1df2['E'] = ['one','one','two','three','four','three'] In [43]: 1df2 Out[43]: A B C D E 2013-01-01 -1.234543 -0.181094 0.602767 0.024092 one 2013-01-02 -1.012344 -1.747663 -0.446165 -0.308272 one 2013-01-03 0.108684 -0.698606 0.294223 0.779937 two 2013-01-04 0.870050 -0.162659 -1.842476 -0.828424 three 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 four 2013-01-06 0.603919 -0.292847 -0.351932 -0.546226 three In [44]: 1df2[df2['E'].isin(['two','four'])] Out[44]: A B C D E 2013-01-03 0.108684 -0.698606 0.294223 0.779937 two 2013-01-05 1.586294 -0.369570 0.887738 -0.067130 four In [45]: 1s1 = pd.Series([1,2,3,4,5,6], index=pd.date_range('20130102', periods=6)) In [46]: 1s1 Out[46]: 12345672013-01-02 12013-01-03 22013-01-04 32013-01-05 42013-01-06 52013-01-07 6Freq: D, dtype: int64 In [47]: 1df['F'] = s1 In [48]: 1df.at[dates[0],'A'] = 0 In [49]: 1df.iat[0,1] = 0 In [50]: 1df.loc[:,'D'] = np.array([5] * len(df)) In [51]: 1df Out[51]: A B C D F 2013-01-01 0.000000 0.000000 0.602767 5 NaN 2013-01-02 -1.012344 -1.747663 -0.446165 5 1.0 2013-01-03 0.108684 -0.698606 0.294223 5 2.0 2013-01-04 0.870050 -0.162659 -1.842476 5 3.0 2013-01-05 1.586294 -0.369570 0.887738 5 4.0 2013-01-06 0.603919 -0.292847 -0.351932 5 5.0 In [52]: 1df2 = df.copy() In [53]: 1df2[df2 &gt; 0] = -df2 In [54]: 1df2 Out[54]: A B C D F 2013-01-01 0.000000 0.000000 -0.602767 -5 NaN 2013-01-02 -1.012344 -1.747663 -0.446165 -5 -1.0 2013-01-03 -0.108684 -0.698606 -0.294223 -5 -2.0 2013-01-04 -0.870050 -0.162659 -1.842476 -5 -3.0 2013-01-05 -1.586294 -0.369570 -0.887738 -5 -4.0 2013-01-06 -0.603919 -0.292847 -0.351932 -5 -5.0 In [55]: 1df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E']) In [56]: 1df1.loc[dates[0]:dates[1],'E'] = 1 In [57]: 1df1 Out[57]: A B C D F E 2013-01-01 0.000000 0.000000 0.602767 5 NaN 1.0 2013-01-02 -1.012344 -1.747663 -0.446165 5 1.0 1.0 2013-01-03 0.108684 -0.698606 0.294223 5 2.0 NaN 2013-01-04 0.870050 -0.162659 -1.842476 5 3.0 NaN In [58]: 1df1.dropna(how='any') Out[58]: A B C D F E 2013-01-02 -1.012344 -1.747663 -0.446165 5 1.0 1.0 In [59]: 1df1.fillna(value=5) Out[59]: A B C D F E 2013-01-01 0.000000 0.000000 0.602767 5 5.0 1.0 2013-01-02 -1.012344 -1.747663 -0.446165 5 1.0 1.0 2013-01-03 0.108684 -0.698606 0.294223 5 2.0 5.0 2013-01-04 0.870050 -0.162659 -1.842476 5 3.0 5.0 In [60]: 1pd.isnull(df1) Out[60]: A B C D F E 2013-01-01 False False False False True False 2013-01-02 False False False False False False 2013-01-03 False False False False False True 2013-01-04 False False False False False True In [61]: 1df.mean() Out[61]: 123456A 0.359434B -0.545224C -0.142641D 5.000000F 3.000000dtype: float64 In [62]: 1df.mean(1) Out[62]: 12345672013-01-01 1.4006922013-01-02 0.5587652013-01-03 1.3408602013-01-04 1.3729832013-01-05 2.2208922013-01-06 1.991828Freq: D, dtype: float64 In [63]: 1s = pd.Series([1,3,5,np.nan,6,8], index=dates).shift(2) In [64]: 1s Out[64]: 12345672013-01-01 NaN2013-01-02 NaN2013-01-03 1.02013-01-04 3.02013-01-05 5.02013-01-06 NaNFreq: D, dtype: float64 In [65]: 1df.sub(s, axis='index') Out[65]: A B C D F 2013-01-01 NaN NaN NaN NaN NaN 2013-01-02 NaN NaN NaN NaN NaN 2013-01-03 -0.891316 -1.698606 -0.705777 4.0 1.0 2013-01-04 -2.129950 -3.162659 -4.842476 2.0 0.0 2013-01-05 -3.413706 -5.369570 -4.112262 0.0 -1.0 2013-01-06 NaN NaN NaN NaN NaN In [66]: 1df.apply(np.cumsum) Out[66]: A B C D F 2013-01-01 0.000000 0.000000 0.602767 5 NaN 2013-01-02 -1.012344 -1.747663 0.156602 10 1.0 2013-01-03 -0.903661 -2.446269 0.450825 15 3.0 2013-01-04 -0.033610 -2.608928 -1.391651 20 6.0 2013-01-05 1.552684 -2.978498 -0.503913 25 10.0 2013-01-06 2.156603 -3.271345 -0.855845 30 15.0 In [67]: 1df.apply(lambda x: x.max() - x.min()) Out[67]: 123456A 2.598639B 1.747663C 2.730214D 0.000000F 4.000000dtype: float64 In [68]: 1s = pd.Series(np.random.randint(0, 7, size=10)) In [69]: 1s Out[69]: 12345678910110 11 32 13 64 65 66 27 68 19 2dtype: int32 In [70]: 1s.value_counts() Out[70]: 123456 41 32 23 1dtype: int64 In [71]: 1s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat']) In [72]: 1s.str.lower() Out[72]: 123456789100 a1 b2 c3 aaba4 baca5 NaN6 caba7 dog8 catdtype: object In [73]: 1df = pd.DataFrame(np.random.randn(10, 4)) In [74]: 1df Out[74]: 0 1 2 3 0 0.087190 0.378057 1.230033 -1.916034 1 1.845394 -0.493289 1.341151 -0.312285 2 -1.414530 0.567152 -1.266626 -0.824010 3 0.085407 1.743999 1.059148 0.967338 4 1.968624 -0.456669 -1.170885 0.144196 5 -0.095139 -0.307934 1.317358 -0.744105 6 -1.557237 -1.185375 0.840714 1.070566 7 0.049833 -0.967053 1.201201 -0.469980 8 0.782234 0.027085 0.573083 1.116846 9 1.293508 1.188724 -1.044702 -0.973416 In [75]: 1pieces = [df[:3], df[3:7], df[7:]] In [76]: 1pd.concat(pieces) Out[76]: 0 1 2 3 0 0.087190 0.378057 1.230033 -1.916034 1 1.845394 -0.493289 1.341151 -0.312285 2 -1.414530 0.567152 -1.266626 -0.824010 3 0.085407 1.743999 1.059148 0.967338 4 1.968624 -0.456669 -1.170885 0.144196 5 -0.095139 -0.307934 1.317358 -0.744105 6 -1.557237 -1.185375 0.840714 1.070566 7 0.049833 -0.967053 1.201201 -0.469980 8 0.782234 0.027085 0.573083 1.116846 9 1.293508 1.188724 -1.044702 -0.973416 In [77]: 1left = pd.DataFrame(&#123;'key': ['foo', 'foo'], 'lval': [1, 2]&#125;) In [78]: 1right = pd.DataFrame(&#123;'key': ['foo', 'foo'], 'rval': [4, 5]&#125;) In [79]: 1left Out[79]: key lval 0 foo 1 1 foo 2 In [80]: 1right Out[80]: key rval 0 foo 4 1 foo 5 In [81]: 1pd.merge(left, right, on='key') Out[81]: key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5 In [82]: 1df = pd.DataFrame(np.random.randn(8, 4), columns=['A','B','C','D']) In [83]: 1df Out[83]: A B C D 0 -1.137633 1.190761 -1.589958 0.274725 1 -1.182860 -0.964490 0.701884 -0.209471 2 1.708852 -0.926927 -1.044458 -1.501952 3 0.956593 0.605129 0.929932 0.382138 4 0.443152 0.795685 -1.092606 0.384814 5 0.570427 0.134011 0.425411 0.672966 6 0.557559 -1.400583 1.328377 -1.237753 7 2.263220 0.883696 1.772972 -1.388512 In [84]: 1s = df.iloc[3] In [85]: 1df.append(s, ignore_index=True) Out[85]: A B C D 0 -1.137633 1.190761 -1.589958 0.274725 1 -1.182860 -0.964490 0.701884 -0.209471 2 1.708852 -0.926927 -1.044458 -1.501952 3 0.956593 0.605129 0.929932 0.382138 4 0.443152 0.795685 -1.092606 0.384814 5 0.570427 0.134011 0.425411 0.672966 6 0.557559 -1.400583 1.328377 -1.237753 7 2.263220 0.883696 1.772972 -1.388512 8 0.956593 0.605129 0.929932 0.382138 In [86]: 123456df = pd.DataFrame(&#123;'A' : ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C' : np.random.randn(8), 'D' : np.random.randn(8)&#125;) In [87]: 1df Out[87]: A B C D 0 foo one 0.135346 -0.916001 1 bar one -0.907362 0.550130 2 foo two -1.758074 0.264998 3 bar three 0.153849 0.566296 4 foo two -1.033947 0.551321 5 bar two 0.494596 -0.859861 6 foo one 0.347631 0.106605 7 foo three 0.785117 -0.138477 In [88]: 1df.groupby('A').sum() Out[88]: C D A bar -0.258916 0.256565 foo -1.523927 -0.131554 In [89]: 1df.groupby(['A','B']).sum() Out[89]: C D A B bar one -0.907362 0.550130 three 0.153849 0.566296 two 0.494596 -0.859861 foo one 0.482977 -0.809396 three 0.785117 -0.138477 two -2.792021 0.816319 In [90]: 1234tuples = list(zip(*[['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']])) In [91]: 1index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second']) In [92]: 1df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B']) In [93]: 1df2 = df[:4] In [94]: 1df2 Out[94]: A B first second bar one -0.723323 0.071984 two -1.068435 -0.485561 baz one 0.018726 -0.379056 two 2.051579 -0.789019 In [95]: 1stacked = df2.stack() In [96]: 1stacked Out[96]: 12345678910first second bar one A -0.723323 B 0.071984 two A -1.068435 B -0.485561baz one A 0.018726 B -0.379056 two A 2.051579 B -0.789019dtype: float64 In [97]: 1stacked.unstack() Out[97]: A B first second bar one -0.723323 0.071984 two -1.068435 -0.485561 baz one 0.018726 -0.379056 two 2.051579 -0.789019 In [98]: 1stacked.unstack(1) Out[98]: second one two first bar A -0.723323 -1.068435 B 0.071984 -0.485561 baz A 0.018726 2.051579 B -0.379056 -0.789019 In [99]: 1stacked.unstack(0) Out[99]: first bar baz second one A -0.723323 0.018726 B 0.071984 -0.379056 two A -1.068435 2.051579 B -0.485561 -0.789019 In [100]: 12345df = pd.DataFrame(&#123;'A' : ['one', 'one', 'two', 'three'] * 3, 'B' : ['A', 'B', 'C'] * 4, 'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2, 'D' : np.random.randn(12), 'E' : np.random.randn(12)&#125;) In [101]: 1df Out[101]: A B C D E 0 one A foo -0.435141 -0.012559 1 one B foo 1.419821 1.676063 2 two C foo -0.844238 -0.248897 3 three A bar 0.291280 1.768196 4 one B bar -0.559366 -1.223321 5 one C bar -1.111149 0.599756 6 two A foo -0.980251 0.168256 7 three B foo 0.596242 -0.515708 8 one C foo -0.445593 0.528068 9 one A bar 0.344460 -0.199001 10 two B bar -1.455970 -0.209612 11 three C bar 0.406563 0.340673 In [102]: 1pd.pivot_table(df, values='D', index=['A', 'B'], columns=['C']) Out[102]: C bar foo A B one A 0.344460 -0.435141 B -0.559366 1.419821 C -1.111149 -0.445593 three A 0.291280 NaN B NaN 0.596242 C 0.406563 NaN two A NaN -0.980251 B -1.455970 NaN C NaN -0.844238 In [103]: 1rng = pd.date_range('1/1/2012', periods=100, freq='S') In [104]: 1ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng) In [105]: 1ts.resample('5Min').sum() Out[105]: 122012-01-01 26177Freq: 5T, dtype: int32 In [106]: 1rng = pd.date_range('3/6/2012 00:00', periods=5, freq='D') In [107]: 1ts = pd.Series(np.random.randn(len(rng)), rng) In [108]: 1ts Out[108]: 1234562012-03-06 1.9647862012-03-07 -0.0862692012-03-08 0.0175382012-03-09 -0.1280882012-03-10 -0.657546Freq: D, dtype: float64 In [109]: 1ts_utc = ts.tz_localize('UTC') In [110]: 1ts_utc Out[110]: 1234562012-03-06 00:00:00+00:00 1.9647862012-03-07 00:00:00+00:00 -0.0862692012-03-08 00:00:00+00:00 0.0175382012-03-09 00:00:00+00:00 -0.1280882012-03-10 00:00:00+00:00 -0.657546Freq: D, dtype: float64 In [111]: 1ts_utc.tz_convert('US/Eastern') Out[111]: 1234562012-03-05 19:00:00-05:00 1.9647862012-03-06 19:00:00-05:00 -0.0862692012-03-07 19:00:00-05:00 0.0175382012-03-08 19:00:00-05:00 -0.1280882012-03-09 19:00:00-05:00 -0.657546Freq: D, dtype: float64 In [112]: 1rng = pd.date_range('1/1/2012', periods=5, freq='M') In [113]: 1ts = pd.Series(np.random.randn(len(rng)), index=rng) In [114]: 1ts Out[114]: 1234562012-01-31 0.5588332012-02-29 -0.2135292012-03-31 -0.9345572012-04-30 -1.9412572012-05-31 -0.705337Freq: M, dtype: float64 In [115]: 1ps = ts.to_period() In [116]: 1ps Out[116]: 1234562012-01 0.5588332012-02 -0.2135292012-03 -0.9345572012-04 -1.9412572012-05 -0.705337Freq: M, dtype: float64 In [117]: 1ps.to_timestamp() Out[117]: 1234562012-01-01 0.5588332012-02-01 -0.2135292012-03-01 -0.9345572012-04-01 -1.9412572012-05-01 -0.705337Freq: MS, dtype: float64 In [118]: 1prng = pd.period_range('1990Q1', '2000Q4', freq='Q-NOV') In [119]: 1ts = pd.Series(np.random.randn(len(prng)), prng) In [120]: 1ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9 In [121]: 1ts.head() Out[121]: 1234561990-03-01 09:00 0.6122251990-06-01 09:00 0.1255011990-09-01 09:00 -0.6471441990-12-01 09:00 0.8584751991-03-01 09:00 0.408605Freq: H, dtype: float64 In [122]: 1df = pd.DataFrame(&#123;"id":[1,2,3,4,5,6], "raw_grade":['a', 'b', 'b', 'a', 'a', 'e']&#125;) In [123]: 1df["grade"] = df["raw_grade"].astype("category") In [124]: 1df["grade"] Out[124]: 123456780 a1 b2 b3 a4 a5 eName: grade, dtype: categoryCategories (3, object): [a, b, e] In [125]: 1df["grade"].cat.categories = ["very good", "good", "very bad"] In [126]: 1df["grade"] = df["grade"].cat.set_categories(["very bad", "bad", "medium", "good", "very good"]) In [127]: 1df["grade"] Out[127]: 123456780 very good1 good2 good3 very good4 very good5 very badName: grade, dtype: categoryCategories (5, object): [very bad, bad, medium, good, very good] In [128]: 1df.sort_values(by="grade") Out[128]: id raw_grade grade 5 6 e very bad 1 2 b good 2 3 b good 0 1 a very good 3 4 a very good 4 5 a very good In [129]: 1df.groupby("grade").size() Out[129]: 1234567gradevery bad 1bad 0medium 0good 2very good 3dtype: int64 In [130]: 1ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000)) In [131]: 1ts = ts.cumsum() In [132]: 1ts.plot() Out[132]: 1&lt;matplotlib.axes._subplots.AxesSubplot at 0x8a81b00&gt; In [133]: 12df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=['A', 'B', 'C', 'D']) In [134]: 1df = df.cumsum() In [135]: 1plt.figure(); df.plot(); plt.legend(loc='best') Out[135]: 1&lt;matplotlib.legend.Legend at 0x8cebf98&gt; In [136]: 1df.to_csv('foo.csv') In [137]: 1pd.read_csv('foo.csv') Out[137]: Unnamed: 0 A B C D 0 2000-01-01 -0.030936 0.895485 0.860234 0.436905 1 2000-01-02 0.462136 1.529305 1.465795 0.275320 2 2000-01-03 1.347457 2.146237 1.025922 1.807516 3 2000-01-04 1.762626 1.617238 2.269617 2.750168 4 2000-01-05 0.752935 -0.573293 2.496633 2.555544 5 2000-01-06 0.559531 -1.075933 3.604460 2.045109 6 2000-01-07 2.864227 2.116665 4.646330 0.552505 7 2000-01-08 2.790815 1.112905 6.876355 0.842887 8 2000-01-09 2.781517 -0.038389 7.562739 -0.677093 9 2000-01-10 3.277815 0.783239 8.625772 -1.210071 10 2000-01-11 2.671833 1.628914 9.013839 -0.878836 11 2000-01-12 3.358392 1.286629 7.869067 0.927850 12 2000-01-13 2.934755 1.281981 8.026394 0.944987 13 2000-01-14 3.855528 1.044585 7.611520 -0.030036 14 2000-01-15 3.197158 1.342844 7.764532 0.003429 15 2000-01-16 3.397053 -0.159531 8.506764 0.788280 16 2000-01-17 2.604527 0.237801 9.856556 1.040767 17 2000-01-18 5.084828 0.499864 9.658846 2.005989 18 2000-01-19 4.106095 -1.350089 9.143522 1.686732 19 2000-01-20 4.175043 -1.190392 8.058163 0.787240 20 2000-01-21 5.185731 -0.777054 8.812265 0.419670 21 2000-01-22 4.371896 0.233903 8.661171 0.965343 22 2000-01-23 4.828027 -1.879995 9.411272 0.913708 23 2000-01-24 5.439256 -1.489195 9.325441 -0.105687 24 2000-01-25 4.692312 -2.057943 11.866773 0.281276 25 2000-01-26 3.076197 -1.366478 13.091266 1.299899 26 2000-01-27 3.061897 -1.074740 12.495540 2.413354 27 2000-01-28 3.331420 -1.146924 12.470048 4.507037 28 2000-01-29 2.539132 -2.027100 13.117951 4.890443 29 2000-01-30 3.063721 -0.814003 13.669964 4.517990 … … … … … … 970 2002-08-28 0.284504 -22.271339 15.981331 15.047098 971 2002-08-29 1.179390 -21.201687 15.868212 14.459094 972 2002-08-30 -1.064233 -22.113170 15.675313 14.426811 973 2002-08-31 -0.204647 -21.770136 16.291319 16.018532 974 2002-09-01 1.565074 -22.972256 16.085625 17.164091 975 2002-09-02 1.594709 -22.544796 15.194863 16.747902 976 2002-09-03 2.058587 -23.616482 16.108197 15.722705 977 2002-09-04 2.204938 -24.498805 17.115751 16.182108 978 2002-09-05 2.544514 -25.655447 17.757754 13.716535 979 2002-09-06 0.042641 -26.231512 16.933801 14.481075 980 2002-09-07 0.151732 -23.564705 18.606103 15.288614 981 2002-09-08 -1.103293 -22.145037 19.017814 14.003808 982 2002-09-09 -0.886503 -23.226622 18.262366 14.134913 983 2002-09-10 -0.460123 -24.301707 18.189121 12.835480 984 2002-09-11 -0.828844 -25.875458 19.843507 12.759591 985 2002-09-12 -0.517894 -25.686486 21.261322 11.394933 986 2002-09-13 0.184588 -25.469125 21.141841 11.325127 987 2002-09-14 1.841196 -23.770084 21.204105 11.307507 988 2002-09-15 3.223569 -23.631714 20.283344 11.293488 989 2002-09-16 3.391174 -22.155609 19.469558 11.086509 990 2002-09-17 2.899235 -21.962757 20.295803 10.123460 991 2002-09-18 1.712088 -20.568953 21.282493 10.251396 992 2002-09-19 3.281950 -21.733617 20.914229 8.739577 993 2002-09-20 2.324456 -21.464629 20.747934 8.104013 994 2002-09-21 3.534397 -21.065582 18.900106 9.929498 995 2002-09-22 2.547043 -21.121919 19.291717 9.657817 996 2002-09-23 3.967868 -20.993894 19.146004 8.970358 997 2002-09-24 3.223028 -21.249086 19.858325 9.268188 998 2002-09-25 3.895291 -21.572320 21.571366 10.031764 999 2002-09-26 3.295146 -20.708933 22.339290 10.840932 1000 rows × 5 columns In [138]: 1df.to_hdf('foo.h5','df') In [139]: 1pd.read_hdf('foo.h5','df') Out[139]: A B C D 2000-01-01 -0.030936 0.895485 0.860234 0.436905 2000-01-02 0.462136 1.529305 1.465795 0.275320 2000-01-03 1.347457 2.146237 1.025922 1.807516 2000-01-04 1.762626 1.617238 2.269617 2.750168 2000-01-05 0.752935 -0.573293 2.496633 2.555544 2000-01-06 0.559531 -1.075933 3.604460 2.045109 2000-01-07 2.864227 2.116665 4.646330 0.552505 2000-01-08 2.790815 1.112905 6.876355 0.842887 2000-01-09 2.781517 -0.038389 7.562739 -0.677093 2000-01-10 3.277815 0.783239 8.625772 -1.210071 2000-01-11 2.671833 1.628914 9.013839 -0.878836 2000-01-12 3.358392 1.286629 7.869067 0.927850 2000-01-13 2.934755 1.281981 8.026394 0.944987 2000-01-14 3.855528 1.044585 7.611520 -0.030036 2000-01-15 3.197158 1.342844 7.764532 0.003429 2000-01-16 3.397053 -0.159531 8.506764 0.788280 2000-01-17 2.604527 0.237801 9.856556 1.040767 2000-01-18 5.084828 0.499864 9.658846 2.005989 2000-01-19 4.106095 -1.350089 9.143522 1.686732 2000-01-20 4.175043 -1.190392 8.058163 0.787240 2000-01-21 5.185731 -0.777054 8.812265 0.419670 2000-01-22 4.371896 0.233903 8.661171 0.965343 2000-01-23 4.828027 -1.879995 9.411272 0.913708 2000-01-24 5.439256 -1.489195 9.325441 -0.105687 2000-01-25 4.692312 -2.057943 11.866773 0.281276 2000-01-26 3.076197 -1.366478 13.091266 1.299899 2000-01-27 3.061897 -1.074740 12.495540 2.413354 2000-01-28 3.331420 -1.146924 12.470048 4.507037 2000-01-29 2.539132 -2.027100 13.117951 4.890443 2000-01-30 3.063721 -0.814003 13.669964 4.517990 … … … … … 2002-08-28 0.284504 -22.271339 15.981331 15.047098 2002-08-29 1.179390 -21.201687 15.868212 14.459094 2002-08-30 -1.064233 -22.113170 15.675313 14.426811 2002-08-31 -0.204647 -21.770136 16.291319 16.018532 2002-09-01 1.565074 -22.972256 16.085625 17.164091 2002-09-02 1.594709 -22.544796 15.194863 16.747902 2002-09-03 2.058587 -23.616482 16.108197 15.722705 2002-09-04 2.204938 -24.498805 17.115751 16.182108 2002-09-05 2.544514 -25.655447 17.757754 13.716535 2002-09-06 0.042641 -26.231512 16.933801 14.481075 2002-09-07 0.151732 -23.564705 18.606103 15.288614 2002-09-08 -1.103293 -22.145037 19.017814 14.003808 2002-09-09 -0.886503 -23.226622 18.262366 14.134913 2002-09-10 -0.460123 -24.301707 18.189121 12.835480 2002-09-11 -0.828844 -25.875458 19.843507 12.759591 2002-09-12 -0.517894 -25.686486 21.261322 11.394933 2002-09-13 0.184588 -25.469125 21.141841 11.325127 2002-09-14 1.841196 -23.770084 21.204105 11.307507 2002-09-15 3.223569 -23.631714 20.283344 11.293488 2002-09-16 3.391174 -22.155609 19.469558 11.086509 2002-09-17 2.899235 -21.962757 20.295803 10.123460 2002-09-18 1.712088 -20.568953 21.282493 10.251396 2002-09-19 3.281950 -21.733617 20.914229 8.739577 2002-09-20 2.324456 -21.464629 20.747934 8.104013 2002-09-21 3.534397 -21.065582 18.900106 9.929498 2002-09-22 2.547043 -21.121919 19.291717 9.657817 2002-09-23 3.967868 -20.993894 19.146004 8.970358 2002-09-24 3.223028 -21.249086 19.858325 9.268188 2002-09-25 3.895291 -21.572320 21.571366 10.031764 2002-09-26 3.295146 -20.708933 22.339290 10.840932 1000 rows × 4 columns In [140]: 1df.to_excel('foo.xlsx', sheet_name='Sheet1') In [141]: 1pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA']) Out[141]: A B C D 2000-01-01 -0.030936 0.895485 0.860234 0.436905 2000-01-02 0.462136 1.529305 1.465795 0.275320 2000-01-03 1.347457 2.146237 1.025922 1.807516 2000-01-04 1.762626 1.617238 2.269617 2.750168 2000-01-05 0.752935 -0.573293 2.496633 2.555544 2000-01-06 0.559531 -1.075933 3.604460 2.045109 2000-01-07 2.864227 2.116665 4.646330 0.552505 2000-01-08 2.790815 1.112905 6.876355 0.842887 2000-01-09 2.781517 -0.038389 7.562739 -0.677093 2000-01-10 3.277815 0.783239 8.625772 -1.210071 2000-01-11 2.671833 1.628914 9.013839 -0.878836 2000-01-12 3.358392 1.286629 7.869067 0.927850 2000-01-13 2.934755 1.281981 8.026394 0.944987 2000-01-14 3.855528 1.044585 7.611520 -0.030036 2000-01-15 3.197158 1.342844 7.764532 0.003429 2000-01-16 3.397053 -0.159531 8.506764 0.788280 2000-01-17 2.604527 0.237801 9.856556 1.040767 2000-01-18 5.084828 0.499864 9.658846 2.005989 2000-01-19 4.106095 -1.350089 9.143522 1.686732 2000-01-20 4.175043 -1.190392 8.058163 0.787240 2000-01-21 5.185731 -0.777054 8.812265 0.419670 2000-01-22 4.371896 0.233903 8.661171 0.965343 2000-01-23 4.828027 -1.879995 9.411272 0.913708 2000-01-24 5.439256 -1.489195 9.325441 -0.105687 2000-01-25 4.692312 -2.057943 11.866773 0.281276 2000-01-26 3.076197 -1.366478 13.091266 1.299899 2000-01-27 3.061897 -1.074740 12.495540 2.413354 2000-01-28 3.331420 -1.146924 12.470048 4.507037 2000-01-29 2.539132 -2.027100 13.117951 4.890443 2000-01-30 3.063721 -0.814003 13.669964 4.517990 … … … … … 2002-08-28 0.284504 -22.271339 15.981331 15.047098 2002-08-29 1.179390 -21.201687 15.868212 14.459094 2002-08-30 -1.064233 -22.113170 15.675313 14.426811 2002-08-31 -0.204647 -21.770136 16.291319 16.018532 2002-09-01 1.565074 -22.972256 16.085625 17.164091 2002-09-02 1.594709 -22.544796 15.194863 16.747902 2002-09-03 2.058587 -23.616482 16.108197 15.722705 2002-09-04 2.204938 -24.498805 17.115751 16.182108 2002-09-05 2.544514 -25.655447 17.757754 13.716535 2002-09-06 0.042641 -26.231512 16.933801 14.481075 2002-09-07 0.151732 -23.564705 18.606103 15.288614 2002-09-08 -1.103293 -22.145037 19.017814 14.003808 2002-09-09 -0.886503 -23.226622 18.262366 14.134913 2002-09-10 -0.460123 -24.301707 18.189121 12.835480 2002-09-11 -0.828844 -25.875458 19.843507 12.759591 2002-09-12 -0.517894 -25.686486 21.261322 11.394933 2002-09-13 0.184588 -25.469125 21.141841 11.325127 2002-09-14 1.841196 -23.770084 21.204105 11.307507 2002-09-15 3.223569 -23.631714 20.283344 11.293488 2002-09-16 3.391174 -22.155609 19.469558 11.086509 2002-09-17 2.899235 -21.962757 20.295803 10.123460 2002-09-18 1.712088 -20.568953 21.282493 10.251396 2002-09-19 3.281950 -21.733617 20.914229 8.739577 2002-09-20 2.324456 -21.464629 20.747934 8.104013 2002-09-21 3.534397 -21.065582 18.900106 9.929498 2002-09-22 2.547043 -21.121919 19.291717 9.657817 2002-09-23 3.967868 -20.993894 19.146004 8.970358 2002-09-24 3.223028 -21.249086 19.858325 9.268188 2002-09-25 3.895291 -21.572320 21.571366 10.031764 2002-09-26 3.295146 -20.708933 22.339290 10.840932]]></content>
      <categories>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删除Git远程仓库文件]]></title>
    <url>%2F2018%2F12%2F12%2F%E5%88%A0%E9%99%A4git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[1.先在本地git清除文件夹1234# 查看本地版本库里的文件 git status# 删除多余的文件 git rm xxx(xxx表文件名) -rf ( -r 当给出主目录名时允许递归删除) 2.本地提交更改12# 提交更新 git commit -m''(-m 备注) 3.最后push到远程仓库12# 更新远程仓库内容 git push 4.最后查看远程仓库内容是否和本地一致]]></content>
  </entry>
  <entry>
    <title><![CDATA[基于阿里云服务器CentOS系统搭建Hexo博客git自动化部署]]></title>
    <url>%2F2018%2F12%2F11%2F%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8CentOS%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2git%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[前言本文介绍的是如何在CentOS系统上使用Hexo博客框架搭建一个完全属于自己的博客系统。 CentOS是什么?CentOS（Community Enterprise Operating System）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代 码规定发布的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS并不包含封閉源码软件。CentOS 对上游代码的主要修改是为了移除不能自由使用的商标。2014年，CentOS宣布与Red Hat合作，但CentOS将会在新的委员会下继续运作，并不受RHEL的影响。 Hexo是什么?Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo使用Node.js来渲染页面，因此渲染速度极快。只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。同时，Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 Nginx是什么?Nginx是一个 Web服务器，也可以用作反向代理，负载平衡器和 HTTP缓存。该软件由 Igor Sysoev 创建，并于2004年首次公开发布。同名公司成立于2011年，以提供支持。Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，Nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑从而削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，Nginx使用epoll事件模型，得益于此，Nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。 Git是什么?git是用于Linux内核开发的版本控制工具。与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git的速度很快，这对于诸如Linux内核这样的大项目来说自然很重要。git最为出色的是它的合并追踪（merge tracing）能力。实际上内核开发团队决定开始开发和使用git来作为内核开发的版本控制系统的时候，世界上开源社区的反对声音不少，最大的理由是git太艰涩难懂，从git的内部工作机制来说，的确是这样。但是随着开发的深入，git的正常使用都由一些友善的命令稿来执行，使git变得非常好用。现在，越来越多的著名项目采用git来管理项目开发，例如：wine、U-boot等。 Node.js是什么？Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js采用Google开发的V8运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的事实应用程序。Node.js的出现使JavaScript也能用于服务器端编程。Node.js含有一系列内置模块，使得程序可以脱离Apache HTTP Server或IIS，作为独立服务器运行。 总体思路以下为了统一说法，统一将云主机称为服务端，将本地电脑称为客户端。本次搭建博客需要在客户端以及服务端进行一系列配置。先说一下整体的实现思路。总的来说分两大步。 第一步，在客户端进行以下工作： 安装Git服务以及配置Git 安装nodejs 安装Hexo框架 第二步，在服务端进行以下工作： 安装Nginx服务 安装Git服务以及nodejs 搭建Git服务器以及配置自动部署 软件下载现在，罗列一下过程所需的软件： Git for Windows Git for Mac Nodejs for Windows putty for Windows 客户端配置安装Git以及进行相关配置1、首先通过前面提供的链接下载Git客户端，然后进行安装。 2、安装完成之后，打开Git Bash进行以下配置.在客户端输入以下代码，生成SSH KEY,用于免密登录服务器，更新服务器git仓库。 12# 将此处的"youremail"替换成自己服务器 “仓库名@ip”ssh-keygen -t rsa -C "youremail" 接着继续输入cat ~/.ssh/id_rsa.pub,然后将得到的秘钥先复制一下，待会服务器配置需要用到。 1cat ~/.ssh/id_rsa.pub 安装Nodejs通过前面提供的链接下载Nodejs，然后进行安装。安装完成后，输入node -v以及npm -v查看node以及npm的版本信息。12node -vnpm -v 安装Hexo框架接下来，就是重头戏：安装Hexo框架了。首先，继续在刚刚打开的Git Bash里面输入以下代码，通过npm进行全局安装hexo 框架。 1npm install -g hexo-cli 安装完hexo框架，就可以开始初始化hexo了，选择一个目录存放你的博客文件， 然后把Git Bash切换到那个目录。接着，输入hexo init blog进行初始化hexo并创建一个blog文件。1hexo init blog 初始化完毕之后，打开博客根目录的package.json文件，在dependencies的配置中，追加一项：”hexo-deployer-git”: “^0.3.1”，如下图，然后，返回Git Bash,先输入cd blog，在输入npm install进行包的安装。(git的新版本不用安装)1vim package.json 安装完包之后，接着在Git Bash输入：hexo s，然后在浏览器输入localhost:4000,就可以看到hexo已经搭建成功了.1hexo s 至此，客户端的配置就告一段落了。接下来开始服务端的配置。 服务端配置首先，进行服务端的系统更新。待更新完系统之后再进行以下操作。(注：putty软件的粘贴快捷键为：“Shift”+“Insert”)输入以下代码，可进行系统更新：1yum update -y 更新完系统，输入以下代码，可查看系统版本： 1cat /etc/centos-release 安装Nginx安装Nginx分为以下几步。第一，配置Nginx官方源。第二，安装Nginx。第三，配置Nginx配置文件。 1、配置Nginx官方源输入以下代码，新建一个文件以配置Nginx源12vi /etc/yum.repos.d/nginx.repo 在打开的文件中输入以下代码，输入完毕之后，按 “esc” 键退出编辑模式， 输入 “:wq” 保存退出。123456[nginx]name=nginx repobaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/gpgcheck=0enabled=1 2、安装Nginx输入以下代码进行安装。12yum install nginx -y 3、启动Nginx并设置开机自启输入以下代码:12systemctl start nginxsystemctl enable nginx 进行到这里，你已经可以把服务器ip复制到浏览器进行访问了~安装成功的话就会出现下面的欢迎界面。 4、配置Nginx接下来，需要修改一下nginx的相关配置，包括设置网站根目录以及配置域名。输入以下代码，打开Nginx的配置文件。(注：此处假定读者已完成了域名备案以及域名解析。)1vi /etc/nginx/conf.d/default.conf 在server配置中将“/usr/share/nginx/html”改为“/usr/share/nginx/html/blog”。 （若是空文件先执行其他操作） 至此，Nginx的配置就基本完成了。 安装Nodejs输入以下代码进行Nodejs的安装。1yum install nodejs 安装Git以及进行相关配置1、输入以下代码，进行Git的安装12yum install git 2、创建git用户以及设置密码输入以下代码：1234#创建用户,用户名为gitadduser git#设置密码passwd git 3、把git用户添加到sudo用户组中输入以下代码sudo vi /etc/sudoers，打开sudoers文件，输入:/root进行搜索，搜索到代码行root ALL=(ALL) ALL,然后在这一行下添加以下代码git ALL=(ALL) ALL。输入完毕之后，按wq!强制保存退出vi。1sudo vi /etc/sudoers 4、切换到git用户，添加SSH Key文件并且设置相应的读写与执行权限。输入以下代码：123456# 切换用户su git# 创建目录mkdir ~/.ssh# 新建文件vim ~/.ssh/authorized_keys 然后把之前在客户端设置的SSH Key,复制到authorized_keys文件中，保存后退出。 接下来设置文件权限，把authorized_keys文件设置成只有属主有读写权限，把ssh目录设置为只有属主有读、写、执行权限。代码如下：12chmod 600 ~/.ssh/authorized_keyschmod 700 ~/.ssh 设置完后，返回客户端，打开Git Bash，输入以下代码，测试是否能连接上服务器：12# ServerIP为你自己服务器的ipssh -v git@ServerIP 5、重新回到服务器，在网站根目录新建一个blog文件夹，用于客户端上传文件，并且把该文件授权给git用户。代码如下：123# 使用sudo指令，需要输入git用户的密码sudo mkdir -p /usr/share/nginx/html/blogsudo chown -R git:git /usr/share/nginx/html/blog 在服务器上初始化一个git裸库切换到git用户，然后切换到git用户目录，接着初始化裸库，代码如下：123su gitcd ~git init --bare blog.git 接着新建一个post-receive文件 1vim ~/blog.git/hooks/post-receive 然后在该文件中输入以下内容：12#！/bin/shgit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/blog.git checkout -f 保存退出之后，再输入以下代码，赋予该文件可执行权限。1chmod +x ~/blog.git/hooks/post-receive 7、返回客户端，设置博客根目录下的_config.yml文件。12345deploy: type: git repo: git@SERVER:/home/git/blog.git #此处的SERVER需改为你自己服务器的ip branch: master #这里填写分支 message: #提交的信息 保存后，在博客根目录打开Git Bash，输入以下命令：12# clean清除缓存，g生成静态文件资源，d部署到远程网站仓库hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 部署完毕之后，即可在浏览器输入你的服务器ip进行访问你的博客了。ps:新建一个博客：hexo new hello，就会在根目录suorce文件中的_posts文件夹中生成一篇hello博客，然后就可以编辑博客了。关于博客中引入图片的问题，需要下载一个img插件，然后命令生成hello时就会同时生成一个同名的hello文件夹用来存储图片，将图片放置在此文件夹中，博客中引入的图片就可以在网站正常显示了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>CentOS+Hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转PyCharm]]></title>
    <url>%2F2018%2F10%2F20%2F%E7%8E%A9%E8%BD%ACPyCharm%2F</url>
    <content type="text"><![CDATA[简介PyCharm是由JetBrains公司开发的提供给Python专业的开发者的一个集成开发环境，它最大的优点是能够大大提升Python开发者的工作效率，为开发者集成了很多用起来非常顺手的功能，包括代码调试、高亮语法、代码跳转、智能提示、自动补全、单元测试、版本控制等等。此外，PyCharm还提供了对一些高级功能的支持，包括支持基于Django框架的Web开发、。 PyCharm的安装可以在JetBrains公司的官方网站找到PyCharm的下载链接，有两个可供下载的版本一个是社区版一个是专业版，社区版在Apache许可证下发布，专业版在专用许可证下发布（需要购买授权下载后可试用30天），其拥有许多额外功能。安装PyCharm需要有JRE（Java运行时环境）的支持，如果没有可以在安装过程中选择在线下载安装。 说明：如果你是一名学生，希望购买PyCharm来使用，可以看看教育优惠官方申请指南。 首次使用的设置第一次使用PyCharm时，会有一个导入设置的向导，如果之前没有使用PyCharm或者没有保存过设置的就直接选择“Do not import settings”进入下一步即可。 专业版的PyCharm是需要激活的，强烈建议为优秀的软件支付费用，如果不用做商业用途，我们可以暂时选择试用30天或者使用社区版的PyCharm。 接下来是选择UI主题，这个可以根据个人喜好进行选择。 再接下来是创建可以在终端（命令行）中使用PyCharm项目的启动脚本，当然也可以直接跳过这一步。 然后可以选择需要安装哪些插件，我们可以暂时什么都不安装等需要的时候再来决定。 用PyCharm创建项目点击上图中的“Start using PyCharm”按钮就可以开始使用PyCharm啦，首先来到的是一个欢迎页，在欢迎页上我们可以选择“创建新项目”、“打开已有项目”和“从版本控制系统中检出项目”。 如果选择了“Create New Project”来创建新项目就会打一个创建项目的向导页。 在如上图所示的界面中，我们可以选择创建项目的模板，包括了纯Python项目、基于各种不同框架的Web项目、Web前端项目、跨平台项目等各种不同的项目模板。如果选择Python的项目，那么有一个非常重要的设定是选择“New environment…”（创建新的虚拟环境）还是使用“Existing Interpreter”（已经存在的解释器）。前者肯定是更好的选择，因为新的虚拟环境不会对系统环境变量中配置的Python环境造成影响，简单举个例子就是你在虚拟环境下安装或者更新了任何三方库，它并不会对系统原有的Python解释器造成任何的影响，但代价是需要额外的存储空间来建立这个虚拟环境。 项目创建完成后就可以开始新建各种文件来书写Python代码了。 在工作窗口的右键菜单中可以找到“Run …”和“Debug …”菜单项，通过这两个菜单项我们就可以运行和调试我们的代码啦。建议关注一下菜单栏中的“Code”、“Refactor”和“Tools”菜单，这里面为编写Python代码提供了很多有用的帮助，我们在后面也会陆续为大家介绍这些功能。]]></content>
      <categories>
        <category>Pycharm</category>
      </categories>
      <tags>
        <tag>PyCharm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些年我们踩过的那些坑]]></title>
    <url>%2F2018%2F10%2F20%2F%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%2F</url>
    <content type="text"><![CDATA[坑01 - 整数比较的坑在 Python 中一切都是对象，整数也是对象，在比较两个整数时有两个运算符==和is，它们的区别是： is比较的是两个整数对象的id值是否相等，也就是比较两个引用是否代表了内存中同一个地址。 ==比较的是两个整数对象的内容是否相等，使用==时其实是调用了对象的__eq__()方法。 知道了is和==的区别之后，我们可以来看看下面的代码，了解Python中整数比较有哪些坑： 123456789101112131415161718192021222324def main(): x = y = -1 while True: x += 1 y += 1 if x is y: print('%d is %d' % (x, y)) else: print('Attention! %d is not %d' % (x, y)) breaktruetruetrue x = y = 0 while True: x -= 1 y -= 1 if x is y: print('%d is %d' % (x, y)) else: print('Attention! %d is not %d' % (x, y)) breakif __name__ == '__main__': main() 上面代码的部分运行结果如下图所示，出现这个结果的原因是Python出于对性能的考虑所做的一项优化。对于整数对象，Python把一些频繁使用的整数对象缓存起来，保存到一个叫small_ints的链表中，在Python的整个生命周期内，任何需要引用这些整数对象的地方，都不再重新创建新的对象，而是直接引用缓存中的对象。Python把频繁使用的整数对象的值定在[-5, 256]这个区间，如果需要这个范围的整数，就直接从small_ints中获取引用而不是临时创建新的对象。因为大于256或小于-5的整数不在该范围之内，所以就算两个整数的值是一样，但它们是不同的对象。 当然仅仅如此这个坑就不值一提了，如果你理解了上面的规则，我们就再看看下面的代码。 1234567891011121314import disa = 257def main(): b = 257 # 第6行 c = 257 # 第7行 print(b is c) # True print(a is b) # False print(a is c) # Falseif __name__ == "__main__": main() 程序的执行结果已经用注释写在代码上了。够坑吧！看上去a、b和c的值都是一样的，但是is运算的结果却不一样。为什么会出现这样的结果，首先我们来说说Python程序中的代码块。所谓代码块是程序的一个最小的基本执行单位，一个模块文件、一个函数体、一个类、交互式命令中的单行代码都叫做一个代码块。上面的代码由两个代码块构成，a = 257是一个代码块，main函数是另外一个代码块。Python内部为了进一步提高性能，凡是在一个代码块中创建的整数对象，如果值不在small_ints缓存范围之内，但在同一个代码块中已经存在一个值与其相同的整数对象了，那么就直接引用该对象，否则创建一个新的对象出来，这条规则对不在small_ints范围的负数并不适用，对负数值浮点数也不适用，但对非负浮点数和字符串都是适用的，这一点读者可以自行证明。所以 b is c返回了True，而a和b不在同一个代码块中，虽然值都是257，但却是两个不同的对象，is运算的结果自然是False了。为了验证刚刚的结论，我们可以借用dis模块（听名字就知道是进行反汇编的模块）从字节码的角度来看看这段代码。如果不理解什么是字节码，可以先看看《谈谈 Python 程序的运行原理》)这篇文章。可以先用import dis导入dis模块并按照如下所示的方式修改代码。 123if __name__ == "__main__": main() dis.dis(main) 代码的执行结果如下图所示。可以看出代码第6行和第7行，也就是main函数中的257是从同一个位置加载的，因此是同一个对象；而代码第9行的a明显是从不同的地方加载的，因此引用的是不同的对象。 如果还想对这个问题进行进一步深挖，推荐大家阅读《Python整数对象实现原理》这篇文章。 坑02 - 嵌套列表的坑Python中有一种内置的数据类型叫列表，它是一种容器，可以用来承载其他的对象（准确的说是其他对象的引用），列表中的对象可以称为列表的元素，很明显我们可以把列表作为列表中的元素，这就是所谓的嵌套列表。嵌套列表可以模拟出现实中的表格、矩阵、2D游戏的地图（如植物大战僵尸的花园）、棋盘（如国际象棋、黑白棋）等。但是在使用嵌套的列表时要小心，否则很可能遭遇非常尴尬的情况，下面是一个小例子。 12345678910111213def main(): names = ['关羽', '张飞', '赵云', '马超', '黄忠'] subjs = ['语文', '数学', '英语'] scores = [[0] * 3] * 5 for row, name in enumerate(names): print('请输入%s的成绩' % name) for col, subj in enumerate(subjs): scores[row][col] = float(input(subj + ': ')) print(scores)if __name__ == '__main__': main() 我们希望录入5个学生3门课程的成绩，于是定义了一个有5个元素的列表，而列表中的每个元素又是一个由3个元素构成的列表，这样一个列表的列表刚好跟一个表格是一致的，相当于有5行3列，接下来我们通过嵌套的for-in循环输入每个学生3门课程的成绩。程序执行完成后我们发现，每个学生3门课程的成绩是一模一样的，而且就是最后录入的那个学生的成绩。 要想把这个坑填平，我们首先要区分对象和对象的引用这两个概念，而要区分这两个概念，还得先说说内存中的栈和堆。我们经常会听人说起“堆栈”这个词，但实际上“堆”和“栈”是两个不同的概念。众所周知，一个程序运行时需要占用一些内存空间来存储数据和代码，那么这些内存从逻辑上又可以做进一步的划分。对底层语言（如C语言）有所了解的程序大都知道，程序中可以使用的内存从逻辑上可以为五个部分，按照地址从高到低依次是：栈（stack）、堆（heap）、数据段（data segment）、只读数据段（static area）和代码段（code segment）。其中，栈用来存储局部、临时变量，以及函数调用时保存现场和恢复现场需要用到的数据，这部分内存在代码块开始执行时自动分配，代码块执行结束时自动释放，通常由编译器自动管理；堆的大小不固定，可以动态的分配和回收，因此如果程序中有大量的数据需要处理，这些数据通常都放在堆上，如果堆空间没有正确的被释放会引发内存泄露的问题，而像Python、Java等编程语言都使用了垃圾回收机制来实现自动化的内存管理（自动回收不再使用的堆空间）。所以下面的代码中，变量a并不是真正的对象，它是对象的引用，相当于记录了对象在堆空间的地址，通过这个地址我们可以访问到对应的对象；同理，变量b是列表容器的引用，它引用了堆空间上的列表容器，而列表容器中并没有保存真正的对象，它保存的也仅仅是对象的引用。 12a = object()b = ['apple', 'pitaya', 'grape'] 知道了这一点，我们可以回过头看看刚才的程序，我们对列表进行[[0] * 3] * 5操作时，仅仅是将[0, 0, 0]这个列表的地址进行了复制，并没有创建新的列表对象，所以容器中虽然有5个元素，但是这5个元素引用了同一个列表对象，这一点可以通过id函数检查scores[0]和scores[1]的地址得到证实。所以正确的代码应该按照如下的方式进行修改。 1234567891011121314def main(): names = ['关羽', '张飞', '赵云', '马超', '黄忠'] subjs = ['语文', '数学', '英语'] scores = [[]] * 5 for row, name in enumerate(names): print('请输入%s的成绩' % name) scores[row] = [0] * 3 for col, subj in enumerate(subjs): scores[row][col] = float(input(subj + ': ')) print(scores)if __name__ == '__main__': main() 或者 1234567891011121314def main(): names = ['关羽', '张飞', '赵云', '马超', '黄忠'] subjs = ['语文', '数学', '英语'] scores = [[0] * 3 for _ in range(5)] for row, name in enumerate(names): print('请输入%s的成绩' % name) scores[row] = [0] * 3 for col, subj in enumerate(subjs): scores[row][col] = float(input(subj + ': ')) print(scores)if __name__ == '__main__': main() 如果对内存的使用不是很理解，可以看看PythonTutor网站上提供的代码可视化执行功能，通过可视化执行，我们可以看到内存是如何分配的，从而避免在使用嵌套列表或者复制对象时可能遇到的坑。 坑03 - 访问修饰符的坑用Python做过面向对象编程的人都知道，Python的类提供了两种访问控制权限，一种是公开，一种是私有（在属性或方法前加上双下划线）。而用惯了Java或C#这类编程语言的人都知道，类中的属性（数据抽象）通常都是私有的，其目的是为了将数据保护起来；而类中的方法（行为抽象）通常都是公开的，因为方法是对象向外界提供的服务。但是Python并没有从语法层面确保私有成员的私密性，因为它只是对类中所谓的私有成员进行了命名的变换，如果知道命名的规则照样可以直接访问私有成员，请看下面的代码。 123456789101112131415161718192021class Student(object): def __init__(self, name, age): self.__name = name self.__age = age def __str__(self): return self.__name + ': ' + str(self.__age)def main(): stu = Student('昊天', 28) # 'Student' object has no attribute '__name' # print(stu.__name) # 用下面的方式照样可以访问类中的私有成员 print(stu._Student__name) print(stu._Student__age)if __name__ == '__main__': main() Python为什么要做出这样的设定呢？用一句广为流传的格言来解释这个问题：“We are all consenting adults here”（我们都是成年人）。这句话表达了很多Python程序员的一个共同观点，那就是开放比封闭要好，我们应该自己对自己的行为负责而不是从语言层面来限制对数据或方法的访问。 所以在Python中我们实在没有必要将类中的属性或方法用双下划线开头的命名处理成私有的成员，因为这并没有任何实际的意义。如果想对属性或方法进行保护，我们建议用单下划线开头的受保护成员，虽然它也不能真正保护这些属性或方法，但是它相当于给调用者一个暗示，让调用者知道这是不应该直接访问的属性或方法，而且这样做并不影响子类去继承这些东西。 需要提醒大家注意的是，Python类中的那些魔法方法，如__str__、__repr__等，这些方法并不是私有成员哦，虽然它们以双下划线开头，但是他们也是以双下划线结尾的，这种命名并不是私有成员的命名，这一点对初学者来说真的很坑。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python惯例]]></title>
    <url>%2F2018%2F10%2F20%2FPython%E6%83%AF%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[前言“惯例”这个词指的是“习惯的做法，常规的办法，一贯的做法”，与这个词对应的英文单词叫“idiom”。由于Python跟其他很多编程语言在语法和使用上还是有比较显著的差别，因此作为一个Python开发者如果不能掌握这些惯例，就无法写出“Pythonic”的代码。下面我们总结了一些在Python开发中的惯用的代码。 让代码既可以被导入又可以被执行。 12if __name__ == '__main__': 用下面的方式判断逻辑“真”或“假”。 123if x:if not x: 好的代码： 123456name = 'jackfrued'fruits = ['apple', 'orange', 'grape']owners = &#123;'1001': '昊天', '1002': '王大锤'&#125;if name and fruits and owners: print('I love fruits!') 不好的代码： 123456name = 'jackfrued'fruits = ['apple', 'orange', 'grape']owners = &#123;'1001': '昊天', '1002': '王大锤'&#125;if name != '' and len(fruits) &gt; 0 and owners != &#123;&#125;: print('I love fruits!') 善于使用in运算符。 123if x in items: # 包含for x in items: # 迭代 好的代码： 1234name = 'Hao LUO'if 'L' in name: print('The name has an L in it.') 不好的代码： 1234name = 'Hao LUO'if name.find('L') != -1: print('This name has an L in it!') 不使用临时变量交换两个值。 12a, b = b, a 用序列构建字符串。 好的代码： 1234chars = ['j', 'a', 'c', 'k', 'f', 'r', 'u', 'e', 'd']name = ''.join(chars)print(name) # jackfrued 不好的代码： 123456chars = ['j', 'a', 'c', 'k', 'f', 'r', 'u', 'e', 'd']name = ''for char in chars: name += charprint(name) # jackfrued EAFP优于LBYL。 EAFP - Easier to Ask Forgiveness than Permission. LBYL - Look Before You Leap. 好的代码： 1234567d = &#123;'x': '5'&#125;try: value = int(d['x']) print(value)except (KeyError, TypeError, ValueError): value = None 不好的代码： 12345678d = &#123;'x': '5'&#125;if 'x' in d and isinstance(d['x'], str) \truetrueand d['x'].isdigit(): value = int(d['x']) print(value)else: value = None 使用enumerate进行迭代。 好的代码： 1234fruits = ['orange', 'grape', 'pitaya', 'blueberry']for index, fruit in enumerate(fruits):trueprint(index, ':', fruit) 不好的代码： 123456fruits = ['orange', 'grape', 'pitaya', 'blueberry']index = 0for fruit in fruits: print(index, ':', fruit) index += 1 用生成式生成列表。 好的代码： 1234data = [7, 20, 3, 15, 11]result = [num * 3 for num in data if num &gt; 10]print(result) # [60, 45, 33] 不好的代码： 1234567data = [7, 20, 3, 15, 11]result = []for i in data: if i &gt; 10: result.append(i * 3)print(result) # [60, 45, 33] 用zip组合键和值来创建字典。 好的代码： 12345keys = ['1001', '1002', '1003']values = ['昊天', '王大锤', '白元芳']d = dict(zip(keys, values))print(d) 不好的代码： 1234567keys = ['1001', '1002', '1003']values = ['昊天', '王大锤', '白元芳']d = &#123;&#125;for i, key in enumerate(keys): d[key] = values[i]print(d)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python编码习惯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python参考书籍]]></title>
    <url>%2F2018%2F10%2F20%2FPython%E5%8F%82%E8%80%83%E4%B9%A6%E7%B1%8D%2F</url>
    <content type="text"><![CDATA[入门读物 《Python基础教程》（Beginning Python From Novice to Professional） 《Python学习手册》（Learning Python） 《Python编程》（Programming Python） 《Python Cookbook》 《Python程序设计》（Python Programming: An Introduction to Computer Science） 《Modern Python Cookbook》 进阶读物 《Python核心编程》（Core Python Applications Programming） 《流畅的Python》（Fluent Python） 《Effective Python：编写高质量Python代码的59个有效方法》（Effective Python 59 Specific Ways to Write Better Python） 《Python设计模式》（Learning Python Design Patterns） 《Python高级编程》（Expert Python Programming） 《Python性能分析与优化》（Mastering Python High Performance） Web框架 《Django基础教程》（Tango with Django） 《轻量级Django》（Lightweight Django） 《Python Web开发：测试驱动方法》（Test-Driven Development with Python） 《Web Development with Django Cookbook》 《Test-Driven Development with Django》 《Django Project Blueprints 》 《Flask Web开发：基于Python的Web应用开发实战》（Flask Web Development: Developing Web Applications with Python） 《深入理解Flask》（Mastering Flask） 爬虫开发 《用Python写网络爬虫》（Web Scraping with Python） 《精通Python爬虫框架Scrapy》（Learning Scrapy） 《Python网络数据采集》（Web Scraping with Python） 《Python爬虫开发与项目实战》 《Python 3网络爬虫开发实战》 数据分析 《利用Python进行数据分析》（Python for Data Analysis） 《Python数据科学手册》（Python Data Science Handbook） 《Python金融大数据分析》（Python for Finance） 《Python数据可视化编程实战》（Python Data Visualization Cookbook） 《Python数据处理》（Data Wrangling with Python） 机器学习 《Python机器学习基础教程》（Introduction to Machine Learning with Python） 《Python机器学习实践指南》（Python Machine Learning Blueprints） 《Python Machine Learning Case Studies》 《Python机器学习实践：测试驱动的开发方法》（Thoughtful Machine Learning with Python A Test Driven Approach） 《Python机器学习经典实例》（Python Machine Learning Cookbook） 《TensorFlow：实战Google深度学习框架》]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈PEP8编码风格]]></title>
    <url>%2F2018%2F10%2F20%2FPEP%208%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[前言PEP是Python Enhancement Proposal的缩写，通常翻译为“Python增强提案”。每个PEP都是一份为Python社区提供的指导Python往更好的方向发展的技术文档，其中的第8号增强提案（PEP 8）是针对Python语言编订的代码风格指南。尽管我们可以在保证语法没有问题的前提下随意书写Python代码，但是在实际开发中，采用一致的风格书写出可读性强的代码是每个专业的程序员应该做到的事情，也是每个公司的编程规范中会提出的要求，这些在多人协作开发一个项目（团队开发）的时候显得尤为重要。我们可以从Python官方网站的PEP 8链接中找到该文档，下面我们对该文档的关键部分做一个简单的总结。 空格的使用 使用空格来表示缩进而不要用制表符（Tab）。这一点对习惯了其他编程语言的人来说简直觉得不可理喻，因为绝大多数的程序员都会用Tab来表示缩进，但是要知道Python并没有像C/C++或Java那样的用花括号来构造一个代码块的语法，在Python中分支和循环结构都使用缩进来表示哪些代码属于同一个级别，鉴于此Python代码对缩进以及缩进宽度的依赖比其他很多语言都强得多。在不同的编辑器中，Tab的宽度可能是2、4或8个字符，甚至是其他更离谱的值，用Tab来表示缩进对Python代码来说可能是一场灾难。 和语法相关的每一层缩进都用4个空格来表示。 每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。 函数和类的定义，代码前后都要用两个空行进行分隔。 在同一个类中，各个方法之间应该用一个空行进行分隔。 二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。 标识符命名PEP 8倡导用不同的命名风格来命名Python中不同的标识符，以便在阅读代码时能够通过标识符的名称来确定该标识符在Python中扮演了怎样的角色（在这一点上，Python自己的内置模块以及某些第三方模块都做得并不是很好）。 变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。 类中受保护的实例属性，应该以一个下划线开头。 类中私有的实例属性，应该以两个下划线开头。 类和异常的命名，应该每个单词首字母大写。 模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。 类的实例方法，应该把第一个参数命名为self以表示对象自身。 类的类方法，应该把第一个参数命名为cls以表示该类自身。 表达式和语句在Python之禅（可以使用import this查看）中有这么一句名言：“There should be one– and preferably only one –obvious way to do it.”，翻译成中文是“做一件事应该有而且最好只有一种确切的做法”，这句话传达的思想在PEP 8中也是无处不在的。 采用内联形式的否定词，而不要把否定词放在整个表达式的前面。例如if a is not b就比if not a is b更容易让人理解。 不要用检查长度的方式来判断字符串、列表等是否为None或者没有元素，应该用if not x这样的写法来检查它。 就算if分支、for循环、except异常捕获等中只有一行代码，也不要将代码和if、for、except等写在一起，分开写才会让代码更清晰。 import语句总是放在文件开头的地方。 引入模块的时候，from math import sqrt比import math更好。 如果有多个import语句，应该将其分为三部分，从上到下分别是Python标准模块、第三方模块和自定义模块，每个部分内部应该按照模块名称的字母表顺序来排列。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PEP8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎访问我的个人博客]]></title>
    <url>%2F2018%2F10%2F17%2F%E6%AC%A2%E8%BF%8E%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[网站说明有任何问题请联系我QQ: 1019217919]]></content>
      <categories>
        <category>py伊甸园</category>
      </categories>
      <tags>
        <tag>基于学习交流的目的搭建此平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复杂到简单你值得拥有]]></title>
    <url>%2F2018%2F10%2F17%2F%E7%94%A8%E5%87%BD%E6%95%B0%E8%BF%98%E6%98%AF%E7%94%A8%E5%A4%8D%E6%9D%82%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[简介Perl语言的原作者Larry Wall曾经说过，伟大的程序员都有三个优点：懒惰、暴躁和自负。乍一看这三个词语没有一个是褒义词，但在程序员的世界里，这三个词有不同的意义。首先，懒惰会促使程序员去写一些省事儿的程序来辅助自己或别人更好的完成工作，这样我们就无需做那些重复和繁琐的劳动；同理能够用3行代码解决的事情，我们也绝不会写出10行代码来。其次，暴躁会让程序员主动的去完成一些你还没有提出的工作，去优化自己的代码让它更有效率，能够3秒钟完成的任务，我们绝不能容忍1分钟的等待。最后，自负会促使程序员写出可靠无误的代码，我们写代码不是为了接受批评和指责，而是为了让其他人来膜拜。 那么接下来就有一个很有意思的问题值得探讨一下，我们需要一个程序从输入的三个数中找出最大的那个数。这个程序对任何会编程的人来说都是小菜一碟，甚至不会编程的人经过10分钟的学习也能搞定。下面是用来解决这个问题的Python代码。 12345678910a = int(input('a = '))b = int(input('b = '))c = int(input('c = '))if a &gt; b:truethe_max = aelse:truethe_max = bif c &gt; the_max:truethe_max = cprint('The max is:', the_max) 但是我们刚才说了，程序员都是懒惰的，很多程序员都会使用三元条件运算符来改写上面的代码。 123456a = int(input('a = '))b = int(input('b = '))c = int(input('c = '))the_max = a if a &gt; b else bthe_max = c if c &gt; the_max else the_maxprint('The max is:', the_max) 需要说明的是，Python在2.5版本以前是没有上面代码第4行和第5行中使用的三元条件运算符的，究其原因是Guido van Rossum（Python之父）认为三元条件运算符并不能帮助 Python变得更加简洁，于是那些习惯了在C/C++或Java中使用三元条件运算符（在这些语言中，三元条件运算符也称为“Elvis运算符”，因为?:放在一起很像著名摇滚歌手猫王Elvis的大背头）的程序员试着用and和or运算符的短路特性来模拟出三元操作符，于是在那个年代，上面的代码是这样写的。 123456a = int(input('a = '))b = int(input('b = '))c = int(input('c = '))the_max = a &gt; b and a or bthe_max = c &gt; the_max and c or the_maxprint('The max is:', the_max) 但是这种做法在某些场景下是不能成立的，且看下面的代码。 123456a = 0b = -100# 下面的代码本来预期输出a的值，结果却得到了b的值# 因为a的值0在进行逻辑运算时会被视为False来处理print(True and a or b)# print(a if True else b) 所以在Python 2.5以后引入了三元条件运算符来避免上面的风险（上面代码被注释掉的最后一句话）。那么，问题又来了，上面的代码还可以写得更简短吗？答案是肯定的。 1234a = int(input('a = '))b = int(input('b = '))c = int(input('c = '))print('The max is:', (a if a &gt; b else b) if (a if a &gt; b else b) &gt; c else c) 但是，这样做真的好吗？如此复杂的表达式是不是让代码变得晦涩了很多呢？我们发现，在实际开发中很多开发者都喜欢过度的使用某种语言的特性或语法糖，于是简单的多行代码变成了复杂的单行表达式，这样做真的好吗？这个问题我也不止一次的问过自己，现在我能给出的答案是下面的代码，使用辅助函数。 12345678def the_max(x, y):truereturn x if x &gt; y else ya = int(input('a = '))b = int(input('b = '))c = int(input('c = '))print('The max is:', the_max(the_max(a, b), c)) 上面的代码中，我定义了一个辅助函数the_max用来找出参数传入的两个值中较大的那一个，于是下面的输出语句可以通过两次调用the_max函数来找出三个数中的最大值，现在代码的可读性是不是好了很多。用辅助函数来替代复杂的表达式真的是一个不错的选择，关键是比较大小的逻辑转移到这个辅助函数后不仅可以反复调用它，而且还可以进行级联操作。 当然，很多语言中比较大小的函数根本没有必要自己来实现（通常都是内置函数），Python也是如此。Python内置的max函数利用了Python对可变参数的支持，允许一次性传入多个值或者一个迭代器并找出那个最大值，所以上面讨论的问题在Python中也就是一句话的事，但是从复杂表达式到使用辅助函数简化复杂表达式这个思想是非常值得玩味的，所以分享出来跟大家做一个交流。 1234a = int(input('a = '))b = int(input('b = '))c = int(input('c = '))print('The max is:', max(a, b, c))]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
